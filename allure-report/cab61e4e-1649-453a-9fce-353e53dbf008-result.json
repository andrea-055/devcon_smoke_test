{"name": "test_spaces_is_accessible[chromium]", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "request = <SubRequest 'page' for <Function test_spaces_is_accessible[chromium]>>\ncontext = <BrowserContext browser=<Browser type=<BrowserType name=chromium executable_path=/Users/AndreaKis/Library/Caches/ms-playwright/chromium-1148/chrome-mac/Chromium.app/Contents/MacOS/Chromium> version=131.0.6778.33>>\nbrowser = <Browser type=<BrowserType name=chromium executable_path=/Users/AndreaKis/Library/Caches/ms-playwright/chromium-1148/chrome-mac/Chromium.app/Contents/MacOS/Chromium> version=131.0.6778.33>\nbase_url = 'https://devcon.buzz/'\n\n    @pytest.fixture(scope='function')\n    def page(request, context, browser, base_url) -> Page:\n        \"\"\"LÃ©trehoz egy Playwright oldalt a tesztekhez\"\"\"\n        reg_marker = request.node.get_closest_marker('registered')\n        file_path = Path('.auth/storage.json')\n    \n        if reg_marker is not None:\n            if not file_path.exists():\n                create_auth_file(file_path)\n                create_auth_content(browser, base_url)\n>           context = browser.new_context(storage_state=file_path, base_url=base_url)\n\ntests/devcon/conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/playwright/sync_api/_generated.py:13928: in new_context\n    self._sync(\n.venv/lib/python3.12/site-packages/playwright/_impl/_browser.py:127: in new_context\n    await prepare_browser_context_params(params)\n.venv/lib/python3.12/site-packages/playwright/_impl/_browser.py:248: in prepare_browser_context_params\n    params[\"storageState\"] = json.loads(\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x100ea3980>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py:355: JSONDecodeError"}, "parameters": [{"name": "browser_name", "value": "'chromium'"}], "start": 1739353685076, "stop": 1739353685076, "uuid": "facfbd00-a682-45ec-b60e-4a25f03444c3", "historyId": "2b3f107ca6a61775f1cb18a26228ec68", "testCaseId": "bb7f5aa55fcf998d97582033a1a72ace", "fullName": "tests.devcon.test_home#test_spaces_is_accessible", "labels": [{"name": "tag", "value": "registered"}, {"name": "parentSuite", "value": "tests.devcon"}, {"name": "suite", "value": "test_home"}, {"name": "host", "value": "Andrea-Kis-Mac"}, {"name": "thread", "value": "26547-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.devcon.test_home"}]}